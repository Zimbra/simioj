{:node {;; each node should have a unique identifier
        :id :n0
        ;; human-friendly name for the node
        :name "node0"
        ;; Inter-node communications
        :endpoint {;; HTTP address:port to bind to
                   :http "0.0.0.0:2283"
                   ;; CORS
                   :access-control-allow-origin [".*"]
                   :access-control-allow-methods [:get :post]
                   }
        ;; Jetty configuration
        :worker {:count 4 :threads 4}
        ;; This location is added to the classpath and should contain
        ;; additional event-handling functions, as required.
        ;; TODO - should this also contain new state-machines?
        :classpath ["/opt/zimbra/simioj/handlers"]
        }
;;; Configure the method the system will use to "discover" all of the
;;; nodes in the cluster
 :discovery {;; :unicast, :multicast (TODO), :disabled (for single node clusters)
             :method :disabled
             ;; Used if :discover-method is :unicast
             ;; list of ip-address port-number pairs (as many as you like)
             :initial-nodes ["127.0.0.1:2283"]
             ;; This is the number of nodes that should be in the cluster.
             ;; Discovery will not complete until there is a quorum.
             ;; Quorum is defined as (inc (bit-shift-right expected-nodes 1))
             :expected-nodes 1
             ;; After :eviction-time milliseconds a node will be removed from
             ;; the cluster topology map
             :eviction-time 60000
             ;; After initial quorum has been reached, the discovery
             ;; module will continue to query all of the nodes that it
             ;; knows about every :poll-interval milliseconds.  If more
             ;; than :eviction-time seconds has passed w/o communication
             ;; with a node, it is evicted from the nodes topology map
             ;; and listeners are notified.
             :poll-interval 1000
             ;; The cluster raft will not be started until
             ;; (1) we have discovered expected-nodes, or
             ;; (2) we have quorum and quorum-timeout milliseconds have elapsed
             :quorum-timeout 30000}
 ;;; Configuration for the Raft that will be started by the API
 :raft {;; ID of raft server.
        :id :s0
        ;; Base path for location where raft data is stored.
        ;; The following subdirectories will be created
        ;;   :prefix/<raft-id>/config
        ;;   :prefix/<raft-id>/state
        ;;   :prefix/<raft-id>/snapshots
        :prefix "/opt/zimbra/simioj/data"
        ;; Raft log initialization function / args
        :log {:fn "" :args ()}
        ;; Raft rpc initialization function / args
        :rpc {:fn "" :args ()}
        ;; Raft election config
        :election-config {:broadcast-timeout 10 :election-timeout-min 150 :election-timeout-max 300}
        ;; Initial servers-config.
        ;; May contain the following entries
        ;; :leader <leader-id> - If using leader affinity
        ;; :servers is a vector that may contain
        ;;   0 or 1 sets of server identifiers; e.g., [#{:s0 :s1 :s2}]
        ;;   These are all the servers that are members of the Raft cluster
        ;; :state-processers - a map of state-machine-processor initializers
        ;; :state-change-listeners - a map of state-change-listener callback initializers
        ;; :max-entries - (integer) max number of entries (commands) to include in a
        ;;   single append-entries RPC call.
        ;; :down-follower-retry (integer, milliseconds) amount of time to wait before
        ;;   attempting to contact a follower that was down.
        :servers-config {:servers []}
        ;; Initial server-state.
        ;; Notes: If a server has persisted state when it starts up, the
        ;;          :server-state config is not used.
        ;;        Upon startup, the following is injected into :server-state
        ;;          from the initialization values provided in :severs-config
        ;;          :leader
        ;;          :servers
        :server-state {}
        }}
